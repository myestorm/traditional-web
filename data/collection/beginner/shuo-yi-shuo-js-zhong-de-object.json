{"body":"<h1 id=\"%E8%AF%B4%E4%B8%80%E8%AF%B4js%E4%B8%AD%E7%9A%84object\"><a class=\"header-anchor\" href=\"#%E8%AF%B4%E4%B8%80%E8%AF%B4js%E4%B8%AD%E7%9A%84object\">¶</a> 说一说JS中的Object</h1>\n<p>Object是在javascript中一个经常使用的类型，而且JS中的所有对象都是继承自Object对象的。虽说我们平时只是简单地使用了Object对象来存储数据，并没有使用到太多其他功能，但是Object对象其实包含了很多有用的属性和方法，尤其是ES6增加的方法，因此，本文将从最基本的介绍开始，详细说明了Object的常用方法和应用。</p>\n<p>Object翻译成中文就是“对象”。JavaScript 的核心是支持面向对象的，同时它也提供了强大灵活的 OOP （Object Oriented Programming）语言能力。</p>\n<p>术语就不说了，只是谈一下初级的入门。对象可以看作是一个人，人具有属性（黑头发，黄皮肤，黑眼珠）和方法（走路，说话，微笑），通过new就可以得到一堆类似的人。其实准确的说法不是一个“人”，而是对人的一些定义。</p>\n<h2 id=\"%E5%B8%B8%E7%94%A8js%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95\"><a class=\"header-anchor\" href=\"#%E5%B8%B8%E7%94%A8js%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95\">¶</a> 常用JS创建对象方法</h2>\n<pre><code class=\"language-js\">const obj = new Object(); // Object构造函数创建\nconst obj1 = { // 使用对象字面量 这个是最常用的方式 \n    color: 'red'\n}\n\nobj.name = 'zhangsan'\nobj.age = 36\nobj.say = (people) =&gt; {\n    console.log(`Hi, ${people}!!!`)\n}\n\nobj1.name = 'lisi'\nobj1.age = 40\nobj1.walk = () =&gt; {\n    console.log('i am walking!!')\n}\n\n// 调用对象方法\nobj.say('xiaoming')\nobj1.walk()\n\n// 获取对象对象属性\nconsole.log(obj1.age)\nconst key = 'name'\nconsole.log(obj1[key]) // 等价于 console.log(obj1.name)，因为key是变量所以用[]来取值\n</code></pre>\n<h2 id=\"%E5%A6%82%E4%BD%95%E9%81%8D%E5%8E%86object%E7%9A%84%E6%89%80%E6%9C%89%E5%B1%9E%E6%80%A7\"><a class=\"header-anchor\" href=\"#%E5%A6%82%E4%BD%95%E9%81%8D%E5%8E%86object%E7%9A%84%E6%89%80%E6%9C%89%E5%B1%9E%E6%80%A7\">¶</a> 如何遍历Object的所有属性</h2>\n<pre><code class=\"language-js\">const obj = {\n    color: 'red',\n    age: 40,\n    walk: (param) =&gt; {\n        console.log(param)\n    }\n}\nObject.keys(obj).forEach(item =&gt; {\n    console.log(item, obj[item])\n})\n</code></pre>\n<h2 id=\"%E7%89%B9%E6%AE%8A%E5%AF%B9%E8%B1%A1-%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1\"><a class=\"header-anchor\" href=\"#%E7%89%B9%E6%AE%8A%E5%AF%B9%E8%B1%A1-%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1\">¶</a> 特殊对象-数组对象</h2>\n<p>什么是数组？是相同数据类型的元素按一定”顺序“排列的集合。注意有顺序，数组是有顺序的。简单的规则：<code>{}</code>是无序的，<code>[]</code>是有序的。数组的顺序是从<code>0</code>开始，即下标是从<code>0</code>开始。</p>\n<pre><code class=\"language-js\">const arr = ['a', 'b', 'c']\nconst arr1 = new Array()\nconst arrObj = [{\n    a: 1,\n    b: 2\n}, {\n    a: 2,\n    b: 3\n}]\narr1.push(1, 2, 3) // 数组最后加入“1”,“2”,“3”\narr1.unshift(0) // 数组最前面加入“0”\narr.splice(1, 1) // 删除'b' 从下标0开始删1位\narr.forEach((item, index) =&gt; { // 遍历数组\n    console.log(item, index) // item是值， index是下标\n})\nconst arr2 = arr.concat(arr1) // 合并数组\nconst arr3 = arr1.filter(item =&gt; item &gt; 2) // 过滤数组 保留大于2的项目\nconst arr4 = arrObj.find(item =&gt; item.a === 2) // 查找a === 2的项\nconst arr5 = arrObj.findIndex(item =&gt; item.a === 2) // 查找a === 2的项的下标\nconsole.log(arr)\nconsole.log(arr1)\nconsole.log(arr2)\nconsole.log(arr3)\nconsole.log(arr4)\nconsole.log(arr5)\n</code></pre>\n<p>当然数组还有更多的方法，这里只是列出来经常用的，大约是关于数据的增删改查。</p>\n<h2 id=\"%E7%89%B9%E6%AE%8A%E5%AF%B9%E8%B1%A1-function\"><a class=\"header-anchor\" href=\"#%E7%89%B9%E6%AE%8A%E5%AF%B9%E8%B1%A1-function\">¶</a> 特殊对象-Function</h2>\n<p>Function翻译成中文就是函数。<code>函数是指一段可以直接被另一段程序或代码引用的程序或代码。</code></p>\n<p>函数在JS里面应该是最重要的东西了，下面的方法只说用法场景，并不解释原理。我始终觉得场景是记住用法的最好的方式。我们也不说“茴”的四种写法，只说最常用的方式。</p>\n<pre><code class=\"language-js\">// 全局\nfunction add (a, b) { // a,b 有个叫法 形参\n    const c = 1 // 局部变量，在“{}”之外无法访问\n    return a + b + c // 返回结果\n}\nconsole.log(add(2, 3)) // 输出6 2，3有个叫法 实参\nconsole.log(c) // 抛出异常 c is not dfined\n\n\nfunction Person (name, age) {\n    this.name = name\n    this.age = age\n    this.cry = function () {\n        console.log(this.name + '哭泣中...')\n    }\n}\n// 原型方法，可以继承\nPerson.prototype.sayHi = function () {\n    console.log(`Hi, my name is ${this.name}`)\n}\nconst xiaoMing = new Person('小明', 20)\nconsole.log(xiaoMing.age) // 输出20\nxiaoMing.sayHi()\nxiaoMing.cry()\n\nconst xiaoHong = new Person('小红', 25)\nconsole.log(xiaoHong.name) // 输出20\nxiaoHong.sayHi()\n\n// 为啥要提这个写法，与直接写Function的作用域不一样，其他可以等价\nconst remove = (a, b) =&gt; {\n    return a - b\n}\nconsole.log(remove(10, 8)) // 输出2\n</code></pre>\n<p>函数之所以重要，就是当你发现自己不停的在重复某个动作的时候，就可以考虑封装一个函数。结合数组对象来理解，Function就是可以自己来自定义类似数组一样的对象，然后反复用。这里有2个坑，一个是<code>this</code>的指向，一个是原型链。这个2个坑比较深，作为入门我觉得无需了解。</p>\n<h2 id=\"js%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F\"><a class=\"header-anchor\" href=\"#js%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F\">¶</a> JS的作用域</h2>\n<p>在 JavaScript 中, 作用域为可访问变量，对象，函数的集合。说白了就是，在某一个区域你能干什么。</p>\n<ul>\n<li>\n<p>变量在函数内声明，变量为局部作用域。局部变量：只能在函数内部访问。</p>\n</li>\n<li>\n<p>变量在函数外定义，即为全局变量。全局变量有 全局作用域: 网页中所有脚本和函数均可使用。</p>\n</li>\n<li>\n<p>JavaScript 变量生命周期</p>\n<ul>\n<li>\n<p>JavaScript 变量生命周期在它声明时初始化。</p>\n</li>\n<li>\n<p>局部变量在函数执行完毕后销毁。</p>\n</li>\n<li>\n<p>全局变量在页面关闭后销毁。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>在 HTML 中, 全局变量是 window 对象: 所有数据变量都属于 window 对象</p>\n</li>\n<li>\n<p>ES6中尽量使用<code>let</code>和<code>const</code>来定义变量，基本能保证变量的作用域和书写的顺序一致</p>\n</li>\n</ul>\n<h2 id=\"%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B\"><a class=\"header-anchor\" href=\"#%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B\">¶</a> 值类型和引用类型</h2>\n<ul>\n<li>\n<p>值类型（基本类型）：字符串（string）、数值（number）、布尔值（boolean）、undefined、null  （这5种基本数据类型是按值访问的，因为可以操作保存在变量中的实际的值）(ECMAScript 2016新增了一种基本数据类型：symbol</p>\n</li>\n<li>\n<p>引用类型：对象（Object）、数组（Array）、函数（Function）</p>\n</li>\n<li>\n<p>值类型占用空间固定，保存与复制的是值本身；引用类型占用空间不固定，保存与复制的是指向对象的一个指针</p>\n</li>\n</ul>\n<pre><code class=\"language-js\">// 值类型\nlet a = 'string'\nlet b = a\nb = 1\nconsole.log(a, b) // 输出 string, 1\n\n// 引用类型\nlet c = {\n    a: 1,\n    b: 2\n}\nlet d = c\nd.a = 3\nconsole.log(c, d) // 输出 {a: 3, b: 2}，{a: 3, b: 2} \n// 实际说明c,d是同一个东西或指向了同一个东西，改一个，全都变了\n</code></pre>\n<h2 id=\"%E5%A5%BD%E7%9A%84%E7%BC%96%E7%A8%8B%E4%B9%A0%E6%83%AF\"><a class=\"header-anchor\" href=\"#%E5%A5%BD%E7%9A%84%E7%BC%96%E7%A8%8B%E4%B9%A0%E6%83%AF\">¶</a> 好的编程习惯</h2>\n<p>编程就跟炒菜是一个道理，先把所有的原料（数据）都准备好，然后再炒（运算），上桌（得到预期的结果）。所以在写一段代码的时候，尽量把需要的变量，数据都准备好，摆在前面，然后再处理逻辑。Js虽然是一种弱类型语言，但是我们在定义变量的时候，尽量明确变量的数据类型。</p>\n","path":"collection/beginner","navigation":[{"tag":"h1","slug":"%E8%AF%B4%E4%B8%80%E8%AF%B4js%E4%B8%AD%E7%9A%84object","title":"说一说JS中的Object"},{"tag":"h2","slug":"%E5%B8%B8%E7%94%A8js%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95","title":"常用JS创建对象方法"},{"tag":"h2","slug":"%E5%A6%82%E4%BD%95%E9%81%8D%E5%8E%86object%E7%9A%84%E6%89%80%E6%9C%89%E5%B1%9E%E6%80%A7","title":"如何遍历Object的所有属性"},{"tag":"h2","slug":"%E7%89%B9%E6%AE%8A%E5%AF%B9%E8%B1%A1-%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1","title":"特殊对象-数组对象"},{"tag":"h2","slug":"%E7%89%B9%E6%AE%8A%E5%AF%B9%E8%B1%A1-function","title":"特殊对象-Function"},{"tag":"h2","slug":"js%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F","title":"JS的作用域"},{"tag":"h2","slug":"%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B","title":"值类型和引用类型"},{"tag":"h2","slug":"%E5%A5%BD%E7%9A%84%E7%BC%96%E7%A8%8B%E4%B9%A0%E6%83%AF","title":"好的编程习惯"}],"orderIndex":9,"filename":"shuo-yi-shuo-js-zhong-de-object"}